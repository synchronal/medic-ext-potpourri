#!/usr/bin/env elixir

defmodule Cli do
  def usage(cmd, dvc \\ :stdio) do
    case cmd do
      "local-certs" ->
        IO.puts(dvc, """
          Ensures that phoenix development certs have been generated

          \x1b[4;1mUsage:\x1b[0;1m medic-check-phoenix local-certs\x1b[0m <COMMAND>

          \x1b[4;1mOptions:\x1b[0m
            \x1b[1m--help\x1b[0m
          """)
      _ ->
        IO.puts(dvc, """
          Checks for the Phoenix framework

          \x1b[4;1mUsage:\x1b[0;1m medic-check-phoenix\x1b[0m <COMMAND>

          \x1b[4;1mCommands:\x1b[0m
            \x1b[1mlocal-certs\x1b[0m  Checks that phoenix development certs have been generated

          \x1b[4;1mOptions:\x1b[0m
            \x1b[1m--help\x1b[0m
          """)
    end
  end
end

defmodule Local.Checks.Phoenix do
  def local_certs? do
    if File.exists?("priv/cert/selfsigned.pem") && File.exists?("priv/cert/selfsigned_key.pem"),
      do: :ok,
      else: {:error, "development certs missing", "mix phx.gen.cert"}
  end
end

case OptionParser.parse(System.argv(), strict: [help: :boolean]) do
  {[help: true], commands, _} ->
    Cli.usage(List.first(commands))

  {_, ["local-certs" | _], _} ->
    case Local.Checks.Phoenix.local_certs?() do
      :ok -> :ok
      {:error, msg, remedy} ->
        IO.puts(:stderr, msg)
        IO.puts(remedy)
        System.halt(1)
    end

  {_, ["help"], _} ->
    Cli.usage(nil)

  {_, commands, _} ->
    Cli.usage(List.first(commands), :stderr)
    System.halt(1)
end
